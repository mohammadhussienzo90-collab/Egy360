# Generated by Django 5.2.6 on 2025-10-15 21:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('tourist', 'Tourist'), ('provider', 'Service Provider'), ('admin', 'Administrator')], default='tourist', help_text='Type of user account', max_length=20)),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], help_text='User gender', max_length=1, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('nationality', models.CharField(blank=True, help_text='User nationality', max_length=50, null=True)),
                ('address', models.CharField(blank=True, help_text='Street address', max_length=255, null=True)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100, null=True)),
                ('state', models.CharField(blank=True, help_text='State/Province', max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, help_text='Postal code', max_length=20, null=True)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100, null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='profiles/')),
                ('bio', models.TextField(blank=True, help_text='User biography', max_length=500, null=True)),
                ('website', models.URLField(blank=True, help_text='Personal or business website', null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Email verified status')),
                ('is_phone_verified', models.BooleanField(default=False, help_text='Phone number verified status')),
                ('is_identity_verified', models.BooleanField(default=False, help_text='Identity verification status')),
                ('business_name', models.CharField(blank=True, help_text='Business name (for providers)', max_length=255, null=True)),
                ('business_license', models.CharField(blank=True, help_text='Business license number', max_length=255, null=True)),
                ('is_licensed', models.BooleanField(default=False, help_text='License verification status')),
                ('language_preference', models.CharField(choices=[('en', 'English'), ('ar', 'Arabic'), ('fr', 'French'), ('de', 'German')], default='en', help_text='Preferred language', max_length=10)),
                ('receive_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('receive_sms', models.BooleanField(default=False, help_text='Receive SMS notifications')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Account creation date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update date')),
                ('last_login_at', models.DateTimeField(blank=True, help_text='Last login timestamp', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='auth_user_email_ece7f7_idx'), models.Index(fields=['user_type'], name='auth_user_user_ty_90c0e9_idx'), models.Index(fields=['is_verified'], name='auth_user_is_veri_c40f2e_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
